/* Stack Implementation */
typedef struct {
    int capacity;
    int top;
    int* data;
} Stack;

Stack* createStack(int capacity) {
    Stack* obj = (Stack*)malloc(sizeof(Stack));
    obj->capacity = capacity;
    obj->top = -1;
    obj->data = (int*)malloc(sizeof(int) * obj->capacity);
    return obj;
}
void push(Stack* obj, int val) {
    obj->data[++(obj->top)] = val;
}
void pop(Stack* obj) {
    --(obj->top);
}
int top(Stack* obj) {
    return obj->data[obj->top];
}
bool empty(Stack* obj) { 
    return obj->top == -1; 
}
void freeStack(Stack* obj) {
    free(obj->data);
    free(obj);
}

/* Queue Implementation using Two Stacks*/
typedef struct {
    Stack* stack1;
    Stack* stack2;
} MyQueue;

MyQueue* myQueueCreate() {
    MyQueue* obj = (MyQueue*)malloc(sizeof(MyQueue));
    obj->stack1 = createStack(100);
    obj->stack2 = createStack(100);
    return obj;
}

// dump all elements of stack1 to stack2
void dumpElements(MyQueue* obj) {
    while (!empty(obj->stack1)) {
        push(obj->stack2, top(obj->stack1));
        pop(obj->stack1);
    }
}

void myQueuePush(MyQueue* obj, int x) {
    push(obj->stack1, x);
}

int myQueuePop(MyQueue* obj) {
    if (empty(obj->stack2)) {
        dumpElements(obj);
    }
    int val = top(obj->stack2);
    pop(obj->stack2);
    return val;
}

int myQueuePeek(MyQueue* obj) {
    if (empty(obj->stack2)) {
        dumpElements(obj);
    }
    return top(obj->stack2);
}

bool myQueueEmpty(MyQueue* obj) {
    return empty(obj->stack1) && empty(obj->stack2);
}

void myQueueFree(MyQueue* obj) {
    freeStack(obj->stack1);
    freeStack(obj->stack2);
    free(obj);
}

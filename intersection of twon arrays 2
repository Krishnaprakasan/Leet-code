/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* intersect(int* nums1, int nums1Size, int* nums2, int nums2Size, int* returnSize) 
{
    int n1[1001] = {0};
    int n2[1001] = {0};
    int i = 0;
    for(i = 0; i < nums1Size; i++) // collect frequency for nums1 and nums2
    {
        n1[nums1[i]]++;
    }
    for(i = 0; i < nums2Size; i++)
    {
        n2[nums2[i]]++;
    }


    int c = 0, m = 0;
    for(i = 0; i < 1001; i++)
    {
        if (n1[i] > n2[i]) // Move the smaller value between n1 & n2 to n1
        {
            n1[i] = n2[i]; // n1 now holds smaller value
        }
        if (n1[i] > 0)
        {
            c += n1[i]; // use to create size of array ans
            m = i;
        }
    }

    *returnSize = c;
    int* ans = malloc(c*sizeof(int));
    int k = 0;

    // we will create solution from n1 where its smallest between n1/n2.
    // when n1 != 0, we build out ans.
    for(i = 0; i <= m; i++)
    {
        if (n1[i] > 0)
        {
            while (n1[i] > 0)
            {
                ans[k++] = i;
                n1[i]--;
            }
        }
    }
    return ans;
}

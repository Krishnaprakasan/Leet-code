class Solution {
public:
    int firstUniqChar(string s) {
        bitset<26> bit1; // One for checking unique
        bitset<26> bit2; // for checking if same char is repeating or not
        for(int i = 0 ; i < s.size() ; i++){
            if(!(bit1.test(s[i]-'a'))){
                bit1.flip(s[i]-'a');
            }else if(!(bit2.test(s[i]-'a'))){
                bit2.flip(s[i]-'a');
            }
        }
        for(int i = 0 ; i < s.size() ; i++){
            if(bit1.test(s[i]-'a')&&(!bit2.test(s[i]-'a'))){ // if char present in first but not in second bitset returns i 
                return i;
            }
        }
        return -1;
    }
};
